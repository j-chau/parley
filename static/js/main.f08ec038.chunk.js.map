{"version":3,"sources":["components/MeetingTime.js","components/AddLocation.js","components/UserInput.js","App.js","serviceWorker.js","index.js"],"names":["buildDisplayArr","timeZoneObj","displayArr","dayShiftArr","key","el","includes","push","MeetingTime","props","className","duration","timeZone","timeZoneCheck","meetingFound","gmtValues","displayStartArr","dayShiftStartArr","startTime","displaySuggestArr","suggestArr","suggestTime","displayTime","x","dayShiftSuggestArr","map","index","newTime","dayShiftStart","dayShiftSuggest","displayGmt","gmtInt","mobileView","window","screen","width","showResults","displayResults","AddLocation","htmlFor","value","defaultValue","name","id","onChange","e","onSelect","timeZoneList","UserInput","timeDropDownLoop","start","end","meetingTimeArr","i","time","etcDropDownLoop","etcArr","etcList","displayText","unshift","disabled","addOrSubtract","change","state","setState","prevState","hasOwnProperty","updateResults","addNewLocation","locationArr","numLocation","saveTimeZone","saveStartTime","parseInt","target","initialTime","copyTimeZone","getUserInput","handleClick","preventDefault","errMsg","action","this","aria-hidden","tabIndex","onClick","type","meetingMsg","Component","App","userInput","Object","values","timeZoneArr","copyTimeZoneCheck","copyStartTime","location1","dayShift1","validateTime","check","every","Boolean","newSuggestStart","newSuggestCheck","noMeetingsMsg","length","goodTime","adjustStartTime","adjustEndTime","axios","method","url","dataResponse","params","reqUrl","xmlToJSON","useCache","then","response","data","pop","truncArr","substring","sort","a","b","negOnlyArr","filter","reverse","sortedArr","slice","concat","href","rel","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f08ec038.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport './../styles/MeetingTime.css';\r\n\r\nconst buildDisplayArr = (timeZoneObj, displayArr, dayShiftArr) => {\r\n    for (const key in timeZoneObj) {\r\n        const el = timeZoneObj[key];\r\n        if (key.includes(\"location\")) displayArr.push(el);\r\n        else dayShiftArr.push(el);\r\n    }\r\n}\r\n\r\nconst showResults = ({ duration, timeZone, timeZoneCheck, meetingFound, gmtValues }) => {\r\n\r\n    // convert timeZone objects to arrays\r\n    let displayStartArr = [];\r\n    let dayShiftStartArr = [];\r\n    buildDisplayArr(timeZone.startTime, displayStartArr, dayShiftStartArr);\r\n\r\n    let displaySuggestArr = [];\r\n    let suggestArr = [];\r\n    buildDisplayArr(timeZone.suggestTime, displaySuggestArr, suggestArr);\r\n\r\n    // if time has rolled into +/- 24 hrs, include +/- 1 day\r\n    const x = suggestArr[0];\r\n    let dayShiftSuggestArr = [0];\r\n    if (!x) {\r\n        dayShiftSuggestArr = suggestArr.map(el => el - x);\r\n    }\r\n\r\n    // if user selected meeting time does not work for every time zone, add class badTime; else add class goodTime\r\n    let displayTime;\r\n    return displayStartArr.map((el, index) => {\r\n        if (timeZoneCheck[index]) displayTime = \"goodTime\";\r\n        else displayTime = \"badTime\";\r\n        const newTime = displaySuggestArr[index];\r\n\r\n        // add '+' to positive values\r\n        let dayShiftStart = dayShiftStartArr[index];\r\n        if (dayShiftStart > 0) dayShiftStart = \"+\" + dayShiftStart\r\n\r\n        let dayShiftSuggest = dayShiftSuggestArr[index];\r\n        if (dayShiftSuggest > 0) dayShiftSuggest = \"+\" + dayShiftSuggest\r\n\r\n        // construct string to display timezone format\r\n        let displayGmt = \"GMT \";\r\n        const gmtInt = gmtValues[index];\r\n        if (gmtInt >= 0) displayGmt += \"+\";\r\n        // only show timezones on screens smaller than 940px\r\n        let mobileView = \" srOnly\";\r\n        if (window.screen.width < 940) mobileView = \"\"\r\n\r\n        return (\r\n            <Fragment key={index}>\r\n                <p className={\"gmtGridItem\" + mobileView}>{displayGmt + gmtInt}</p>\r\n\r\n                {/* display meeting times with user selected time */}\r\n                <p className={displayTime}>\r\n                    {`${el} - ${el + duration}`}\r\n                    {dayShiftStart !== 0 && (<span className=\"dayShift\">{dayShiftStart + \" day\"}</span>)}\r\n                </p>\r\n\r\n                {meetingFound === true\r\n                    // display suggested meeting times\r\n                    ? <p>{`${newTime} - ${newTime + duration}`}\r\n                        {dayShiftSuggest !== 0 && (<span className=\"dayShift\">{dayShiftSuggest + \" day\"}</span>)}\r\n                    </p>\r\n                    : <p>None</p>}\r\n            </Fragment>\r\n        )\r\n    })\r\n}\r\n\r\nconst MeetingTime = (props) => {\r\n    return (\r\n        <div className=\"gridContainer\">\r\n            <h3>Local time</h3>\r\n            <h3>Suggestions</h3>\r\n            {showResults(props.displayResults)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MeetingTime;","import React from 'react'\r\n\r\nconst AddLocation = (props) => {\r\n    return (\r\n        <div className=\"gtm\">\r\n            <label htmlFor=\"selectTimeZone\">Select Time Zone:</label>\r\n            <select value={props.value} defaultValue=\"\" name={props.id} id=\"selectTimeZone\" onChange={(e) => props.onSelect(e)}>\r\n                {props.timeZoneList}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLocation;","import React, { Component } from 'react';\r\nimport './../styles/UserInput.css';\r\n\r\nimport AddLocation from './AddLocation.js';\r\n\r\nexport default class UserInput extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            initialTime: 8,\r\n            duration: 1,\r\n            timeZone: {},\r\n            numLocation: 1,\r\n            errMsg: \"\",\r\n        }\r\n    }\r\n\r\n    timeDropDownLoop = (start, end) => {\r\n        let meetingTimeArr = [];\r\n        for (let i = start; i < end; i++) {\r\n            let time = i;\r\n            meetingTimeArr.push(<option value={i} key={i}> {time}:00</option>)\r\n        }\r\n        return meetingTimeArr;\r\n    }\r\n\r\n    etcDropDownLoop = () => {\r\n        const etcArr = this.props.etcList.map(el => {\r\n            let displayText = \"GMT \";\r\n            if (el >= 0) displayText += \"+\";\r\n            return (\r\n                <option value={el} key={el}>{displayText + el}</option>\r\n            )\r\n        })\r\n        etcArr.unshift(<option value={\"\"} key=\"a\" disabled> {\"\"} </option>);\r\n        return etcArr;\r\n    }\r\n\r\n    addOrSubtract = (change) => {\r\n        const duration = this.state.duration + change;\r\n        if (duration < 5 && duration > 0) {\r\n            this.setState(prevState => ({\r\n                duration: prevState.duration + change\r\n            }), () => {\r\n                if (this.state.timeZone.hasOwnProperty(\"location1\")) this.updateResults();\r\n            })\r\n        }\r\n    }\r\n\r\n    addNewLocation = () => {\r\n        let locationArr = [];\r\n        for (let i = 0; i < this.state.numLocation; i++) {\r\n            locationArr.push(\r\n                <AddLocation\r\n                    id={i + 1}\r\n                    key={i + 1}\r\n                    timeZoneList={this.etcDropDownLoop()}\r\n                    onSelect={this.saveTimeZone} />\r\n            )\r\n        }\r\n        return locationArr;\r\n    }\r\n\r\n    saveStartTime = (e) => {\r\n        let time = parseInt(e.target.value);\r\n        this.setState({\r\n            initialTime: time\r\n        }, () => {\r\n            if (this.state.timeZone.hasOwnProperty(\"location1\")) this.updateResults();\r\n        })\r\n    }\r\n\r\n    saveTimeZone = (e) => {\r\n        const copyTimeZone = { ...this.state.timeZone };\r\n        const keyName = \"location\" + e.target.name;\r\n        copyTimeZone[keyName] = e.target.value;\r\n\r\n        if (e.target.value !== '') {\r\n            this.setState({\r\n                timeZone: copyTimeZone\r\n            }, this.updateResults);\r\n        }\r\n    }\r\n\r\n    updateResults = () => {\r\n        const { initialTime, duration, timeZone } = this.state;\r\n        this.props.getUserInput(initialTime, duration, timeZone);\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.duration === 0) this.setState({\r\n            errMsg: \"Meeting duration cannot be 0\"\r\n        })\r\n        else if (this.state.numLocation < 3) {\r\n            this.setState(prevState => ({\r\n                numLocation: prevState.numLocation + 1,\r\n                errMsg: \"\"\r\n            }))\r\n            this.addNewLocation();\r\n        } else this.setState({\r\n            errMsg: \"Max. number of locations reached\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"inputForm\" action=\"\">\r\n\r\n                <fieldset className=\"meetingStart\">\r\n                    <label htmlFor=\"initialMeetingTime\">Meeting Start</label>\r\n                    <select value={this.state.initialTime} onChange={this.saveStartTime} name=\"selectMeetingTime\" id=\"initialMeetingTime\">\r\n                        {this.timeDropDownLoop(8, 19)}\r\n                    </select>\r\n                </fieldset>\r\n\r\n                <label htmlFor=\"meetingDuration\">Meeting Duration</label>\r\n                <fieldset className=\"addSubtract\" id=\"meetingDuration\">\r\n\r\n                    <span className=\"srOnly\">subtract meeting time</span>\r\n                    <i className=\"fas fa-minus\" aria-hidden=\"true\" tabIndex={0} onClick={() => this.addOrSubtract(-1)}></i>\r\n\r\n                    <span>{this.state.duration}</span>\r\n\r\n                    <span className=\"srOnly\">add meeting time</span>\r\n                    <i className=\"fas fa-plus\" aria-hidden=\"true\" tabIndex={0} onClick={() => this.addOrSubtract(+1)}></i>\r\n                </fieldset>\r\n\r\n                {this.addNewLocation()}\r\n\r\n                <button type=\"submit\" value=\"Submit\" onClick={this.handleClick}>Add New Location</button>\r\n                <p className=\"errMsg\">{this.state.errMsg}</p>\r\n                <p className=\"errMsg\">{this.props.meetingMsg}</p>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport './styles/MediaQuery.css'\r\n\r\nimport MeetingTime from './components/MeetingTime';\r\nimport UserInput from './components/UserInput';\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      etcList: [],\r\n      userInput: {\r\n        meetingFound: true,\r\n        noMeetingsMsg: \"\",\r\n        duration: 0,\r\n        initialTime: 0,\r\n        timeZone: {\r\n          startTime: {},\r\n          suggestTime: {}\r\n        },\r\n        timeZoneCheck: [],\r\n        gmtValues: []\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios({\r\n      method: 'Get',\r\n      url: 'https://proxy.hackeryou.com',\r\n      dataResponse: 'json',\r\n      params: {\r\n        reqUrl: `https://worldtimeapi.org/api/timezone/Etc`,\r\n        xmlToJSON: false,\r\n        useCache: false\r\n      }\r\n    }).then(response => {\r\n      const etcList = response.data;\r\n      etcList.pop();\r\n      const truncArr = etcList.map(el => parseInt(el.substring(7)));\r\n      truncArr[0] = 0;\r\n      truncArr.sort((a, b) => a - b);\r\n\r\n      const negOnlyArr = truncArr.filter(el => el < 0).reverse();\r\n      const posOnlyArr = truncArr.slice(negOnlyArr.length);\r\n      const sortedArr = posOnlyArr.concat(negOnlyArr);\r\n\r\n      this.setState({\r\n        etcList: sortedArr,\r\n      })\r\n    })\r\n  }\r\n\r\n  getUserInput = (initialTime, duration, timeZone) => {\r\n    this.setState(prevState => ({\r\n      userInput: {\r\n        ...prevState.userInput,\r\n        initialTime: initialTime,\r\n        duration,\r\n        timeZone: {\r\n          startTime: timeZone\r\n        },\r\n      }\r\n    }))\r\n\r\n    // creating array from the values of the timeZone\r\n    const timeZoneObj = Object.values(timeZone);\r\n    const timeZoneArr = timeZoneObj.map(el => parseInt(el))\r\n    let startTime = initialTime;\r\n    // initial settings for validateTime()\r\n    let copyTimeZoneCheck = [];\r\n    let copyStartTime = {\r\n      location1: startTime,\r\n      dayShift1: 0\r\n    };\r\n\r\n    this.validateTime(timeZoneArr, startTime, duration, copyTimeZoneCheck, copyStartTime);\r\n    this.setState(prevState => ({\r\n      userInput: {\r\n        ...prevState.userInput,\r\n        timeZone: {\r\n          startTime: copyStartTime,\r\n          suggestTime: copyStartTime\r\n        },\r\n        timeZoneCheck: copyTimeZoneCheck,\r\n        gmtValues: timeZoneObj\r\n      }\r\n    }))\r\n\r\n    // if meeting time for other locations are outside of work hours, \r\n    //    iterate start time (from initial user input) until suitable time is reached\r\n    let check = copyTimeZoneCheck.every(Boolean);\r\n    let newSuggestStart = { ...copyStartTime };\r\n    if (!check) {\r\n      let newSuggestCheck = [...copyTimeZoneCheck];\r\n      let i = 0;\r\n      while (!check && i < 24) {\r\n        i++;\r\n        startTime += 1;\r\n        check = this.validateTime(timeZoneArr, startTime, duration, newSuggestCheck, newSuggestStart).every(Boolean);\r\n      }\r\n    }\r\n\r\n    // when check becomes true after while loop, setState for updated suggestTime\r\n    if (check) {\r\n      this.setState(prevState => ({\r\n        userInput: {\r\n          ...prevState.userInput,\r\n          meetingFound: true,\r\n          noMeetingsMsg: \"\",\r\n          timeZone: {\r\n            ...prevState.userInput.timeZone,\r\n            suggestTime: newSuggestStart\r\n          }\r\n        }\r\n      }))\r\n    } else {\r\n      this.setState(prevState => ({\r\n        userInput: {\r\n          ...prevState.userInput,\r\n          meetingFound: false,\r\n          noMeetingsMsg: \"No meetings found during work hours\"\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  validateTime = (timeZoneArr, startTime, duration, copyTimeZoneCheck, copyStartTime) => {\r\n    for (let i = 0; i < timeZoneArr.length; i++) {\r\n\r\n      // adjusting time at different timeZones to be relative to first location\r\n      let goodTime = true;\r\n      let adjustStartTime = startTime + timeZoneArr[i] - timeZoneArr[0];\r\n\r\n      // adjust for times that are outside 0-24\r\n      if (adjustStartTime < 0) {\r\n        adjustStartTime += 24;\r\n        copyStartTime[\"dayShift\" + (i + 1)] = -1;\r\n      } else if (adjustStartTime > 24) {\r\n        adjustStartTime -= 24;\r\n        copyStartTime[\"dayShift\" + (i + 1)] = +1;\r\n      } else {\r\n        copyStartTime[\"dayShift\" + (i + 1)] = 0;\r\n      }\r\n\r\n      let adjustEndTime = adjustStartTime + duration;\r\n      // if meeting start time OR meeting end time is outside of working hours, set false\r\n      if ((adjustStartTime < 8 || adjustStartTime > 19)\r\n        || (adjustEndTime < 8 || adjustEndTime > 19)) goodTime = false;\r\n      copyTimeZoneCheck[i] = goodTime;\r\n\r\n      const keyName = \"location\" + (i + 1);\r\n      copyStartTime[keyName] = adjustStartTime;\r\n    }\r\n    return copyTimeZoneCheck;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <header>\r\n            <h1>\r\n              <p>Parley</p>\r\n              <p className=\"tagline\">Time Zone Converter</p>\r\n            </h1>\r\n          </header>\r\n          <div className=\"flex\">\r\n            {/* <div> */}\r\n            <UserInput\r\n              etcList={this.state.etcList}\r\n              getUserInput={this.getUserInput}\r\n              meetingFound={this.state.userInput.meetingFound}\r\n              meetingMsg={this.state.userInput.noMeetingsMsg}\r\n            />\r\n            {/* </div> */}\r\n            <MeetingTime displayResults={this.state.userInput} />\r\n          </div>\r\n        </div>\r\n        <footer>\r\n          <p>\r\n            &copy; Created at{\" \"}\r\n            <a\r\n              href=\"https://junocollege.com/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Juno College\r\n            </a>\r\n          </p>\r\n        </footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}